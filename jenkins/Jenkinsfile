pipeline {
    agent any
    environment {
/*         COMMITTER_EMAIL = """${sh(
                returnStdout: true,
                script: 'git log -n 1 --format="%an <%ae>"'
            )}""" */
		COMMITTER_EMAIL = 'lukasz.otczyk.capgemini@gmail.com'
    }
    stages {
/* 		stage('Setup') {
            agent {
                docker {
                    image 'samueldebruyn/debian-git'
                }
            }
			steps {
			    sh "git log -n 1 --format='%an <%ae>'"
				echo "${env.CHANGE_AUTHOR} ${env.CHANGE_AUTHOR_DISPLAY_NAME} ${env.CHANGE_AUTHOR_EMAIL} ${env.BUILD_ID}"
				echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
				sh 'printenv'
			}
		} */
		stage('Maven steps') {
	        agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            stages {
                stage('Build') {
                    steps {
                        sh 'mvn -B -DskipTests clean package'
                    }
                }
				stage('Paraller stages') {
					parallel {
						stage('Test') {
							steps {
								sh 'mvn test'
							}
							post {
								always {
									junit 'target/surefire-reports/*.xml'
								}
							}
						}
						stage('Sonar') {
							steps {
								withSonarQubeEnv('SonarQube on my laptop') {
									sh 'mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install -Dmaven.test.failure.ignore=false'
									sh 'mvn sonar:sonar'
								}
				/* 				sh 'mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install -Dmaven.test.failure.ignore=false'
								sh 'mvn sonar:sonar \
									-Dsonar.host.url=https://c70ab213.ngrok.io \
									-Dsonar.login=e1989d283b8d20cd63f95a1c75a41f36e084f149' */
							}
						}
					}
				}
                stage('Deliver') {
                    steps {
                        sh './jenkins/scripts/deliver.sh'
                    }
                }
				stage('Quality Gates') {
					steps {
						timeout(time: 5, unit: 'MINUTES') {
							waitForQualityGate abortPipeline: true
						}
					}
				}
            }
		}
    }
	post {
		always  {
			emailext body: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS: \nCheck console output at $BUILD_URL to view the results.',
			recipientProviders: [[$class: 'DevelopersRecipientProvider']],
			subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!',
			to: env.COMMITTER_EMAIL;
		}
	}
}