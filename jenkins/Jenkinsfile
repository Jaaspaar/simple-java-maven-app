pipeline {
    agent any
    environment {
/*         COMMITTER_EMAIL = """${sh(
                returnStdout: true,
                script: 'git log -n 1 --format="%an <%ae>"'
            )}""" */
		COMMITTER_EMAIL = 'lukasz.otczyk.capgemini@gmail.com'
    }
    stages {
/* 		stage('Parallel stages') {
			parallel {
				stage('Test') {
					agent {
						docker {
							image 'maven:3-alpine'
							args '-v /root/.m2:/root/.m2'
						}
					}
					steps {
						sh 'mvn test'
					}
					post {
						always {
							junit 'target/surefire-reports/*.xml'
						}
					}
				}
				stage('Sonar') {
					agent {
						docker {
							image 'maven:3-alpine'
							args '-v /root/.m2:/root/.m2'
						}
					}
					steps {
						withSonarQubeEnv('SonarQube on my laptop') {
							sh 'mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install -Dmaven.test.failure.ignore=false'
							sh 'mvn sonar:sonar'
						}
					}
				}
			}
		} */
		stage('Maven steps') {
	        agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v /root/.m2:/root/.m2'
                }
            }
			def server = Artifactory.server('artifactory-on-my-laptop')
			def rtMaven = Artifactory.newMavenBuild()
			def buildInfo
            stages {
                stage('Build') {
                    steps {
                        sh 'mvn -B -DskipTests clean package'
                    }
                }
                stage('Deliver') {
                    steps {
                        sh './jenkins/scripts/deliver.sh'
                    }
                }
				stage('Artifactory') {
					steps {
						rtMaven.deployer server: server, releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local'
						rtMaven.run pom: 'maven-example/pom.xml', goals: 'clean package'
					}
				}
				stage('Quality Gates') {
					steps {
						timeout(time: 5, unit: 'MINUTES') {
							waitForQualityGate abortPipeline: true
						}
					}
				}
            }
		}
    }
	post {
		always  {
			emailext body: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS: \nCheck console output at $BUILD_URL to view the results.',
			//recipientProviders: [[$class: 'DevelopersRecipientProvider']],
			subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!',
			to: env.COMMITTER_EMAIL;
		}
	}
}